// Анализ преимуществ и недостатков контейнеров std::vector и std::list:
//std::vector:
//Преимущества:
	//1.Быстрый доступ к элементам : При использовании std::vector вы можете легко получить доступ к элементам по индексу, так как они хранятся в памяти последовательно.
	//2.Эффективное хранение: std::vector хранит элементы в непрерывном блоке памяти, что обеспечивает эффективное использование кэш - памяти процессора.
	//3.Динамическое изменение размера: Вы можете добавлять и удалять элементы из std::vector сравнительно легко.

	//-Недостатки:
	//1.Медленное удаление элементов: Удаление элементов из середины std::vector может быть медленным, так как все элементы после удаленного должны быть сдвинуты.
	//2.Перераспределение памяти: При добавлении элементов std::vector иногда может потребоваться перераспределение памяти, что может привести к копированию всех элементов в новый блок памяти.

	// std::list:
//Преимущества:
	//1.Быстрая вставка и удаление: std::list обеспечивает быструю вставку и удаление элементов в любом месте списка без необходимости перемещения других элементов.
	//2.Стабильные итераторы: Итераторы std::list остаются действительными после вставки или удаления элементов из списка.

	//-Недостатки:
	//1.Медленный доступ по индексу: Для доступа к элементу по индексу в std::list требуется пройти все предыдущие элементы, что делает эту операцию медленной.
	//2.Использование больше памяти: Каждый элемент std::list требует дополнительной памяти для хранения указателя на следующий и предыдущий элемент.

	//Поэтому, если вам часто нужен быстрый доступ к элементам по индексу и вы часто изменяете размер контейнера, std::vector может быть более подходящим выбором.
	//С другой стороны, если вам часто требуется вставлять или удалять элементы из середины контейнера, то std::list может быть более эффективным вариантом.